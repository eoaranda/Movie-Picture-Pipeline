# This file contains the configuration for the frontend continuous delivery workflow
name: Frontend Continuous Delivery
# For the Continuous Delivery we will focus on test, build a deploy to kubernetes the frontend application

# Triggers for the workflow
on:
    # Manual trigger using the workflow_dispatch event
    workflow_dispatch:

    # Automatic trigger on push events to the main branch
    push:
        branches:
            - main
        # Trigger only when changes occur in this directory and this not triggered for the frontend
        paths:
            - 'starter/frontend/**' 

env:
  # Set Node.js Version
  NODE_VERSION: '18.x'
  # Define frontend path 
  PROJECT_DIR: 'starter/frontend' 
  # Define the API URL 
  REACT_APP_MOVIE_API_URL: http://localhost:5000
  # Define the cluster name 
  EKS_CLUSTER: 'mp-eks-cluster'
  # Define the repository name
  REPOSITORY: 'mp-frontend'

# Jobs defined in the workflow            
jobs:
    # First task to run in the workflow
    linting_stage:
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js 
              uses: actions/setup-node@v4
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm' # Caches the node_modules folder to speed up the workflow
                cache-dependency-path: ${{ env.PROJECT_DIR }}/package-lock.json

            # Log the Node.js version
            - name: Log Node.js Version
              run: |
               echo "Using Node.js version: ${{ env.NODE_VERSION }}"

            #Obtained from the Frontend Development Notes
            - name: Install dependencies
              working-directory: ${{ env.PROJECT_DIR }}
              run: npm ci

            #Obtained from the Frontend Development Notes
            - name: Lint code
              working-directory: ${{ env.PROJECT_DIR }}
              run: npm run lint
    
    # Second task to run in the workflow
    test_stage:
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js 
              uses: actions/setup-node@v4
              with:
                node-version: ${{env.NODE_VERSION}}
                cache: 'npm' # Caches the node_modules folder to speed up the workflow
                cache-dependency-path: ${{ env.PROJECT_DIR }}/package-lock.json

            # Log the Node.js version
            - name: Log Node.js Version
              run: |
               echo "Using Node.js version: ${{ env.NODE_VERSION }}"

            #Obtained from the Frontend Development Notes
            - name: Install dependencies
              working-directory: ${{ env.PROJECT_DIR }}
              run: npm ci

            #Obtained from the Frontend Development Notes
            - name: Run tests
              working-directory: ${{ env.PROJECT_DIR }}
              run: npm test

    # Third task to run in the workflow
    build_and_deploy_stage:
        runs-on: ubuntu-22.04
        # This task depends on the linting_stage and test_stage tasks
        needs: [linting_stage, test_stage] 
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Configure AWS Credentials
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
                aws-region: ${{vars.AWS_REGION}}

            # Login to Amazon ECR
            - name: Login to Amazon ECR
              id: login-ecr # This is used to reference this step later
              uses: aws-actions/amazon-ecr-login@v2

            # Create ECR Repository if not exists programmatically instead of manually doing it in the AWS console
            - name: Create ECR Repository if not exists
              run: |
                aws ecr describe-repositories --repository-names ${{ env.REPOSITORY }} --region ${{ vars.AWS_REGION }} || \
                aws ecr create-repository --repository-name ${{ env.REPOSITORY }} --region ${{ vars.AWS_REGION }}

            # Set up Docker
            - name: Set up Docker
              run: docker --version

            # Build Docker Image and tag it
            - name: Build, tag, and push docker image to Amazon ECR
              working-directory: ${{ env.PROJECT_DIR }}
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/${{ env.REPOSITORY }}:$IMAGE_TAG .
                docker push $REGISTRY/${{ env.REPOSITORY }}:$IMAGE_TAG

            # Create EKS Cluster if not exists
            - name: Ensure EKS Cluster Exists
              run: |
                CLUSTER_NAME="${{ env.EKS_CLUSTER }}"  
                REGION="${{ vars.AWS_REGION }}"
                
                if ! aws eks describe-cluster --name $CLUSTER_NAME --region $REGION > /dev/null 2>&1; then
                echo "Cluster $CLUSTER_NAME not found. Creating it..."
                aws eks create-cluster \
                    --name $CLUSTER_NAME \
                    --region $REGION \
                    --role-arn <YOUR_ROLE_ARN> \
                    --resources-vpc-config subnetIds=<YOUR_SUBNET_IDS>,securityGroupIds=<YOUR_SECURITY_GROUP_IDS>
                
                echo "Cluster creation initiated. Waiting for it to become active..."
                aws eks wait cluster-active --name $CLUSTER_NAME --region $REGION
                else
                echo "Cluster $CLUSTER_NAME already exists."
                fi

            # Configure Kubeconfig
            - name: Configure Kubeconfig
              run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{vars.AWS_REGION}}

            # Install Kustomize
            - name: Install Kustomize
              run: |
                curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
                sudo mv kustomize /usr/local/bin/
            
            # Verify Kustomize Installation
            - name: Verify Kustomize Installation
              run: kustomize version

            # Deploy application to EKS cluster
            - name: Deploy application to EKS cluster
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                cd starter/frontend/k8s
                kustomize edit set image frontend=$REGISTRY/${{ env.REPOSITORY }}:$IMAGE_TAG
                kustomize build | kubectl apply -f -
            
            # Fetch Logs on Failure
            - name: Fetch Logs on Failure
              if: failure()
              run: |
                kubectl logs -l app=frontend --tail=50

            # Validate Deployment
            - name: Validate Deployment
              run: |
                kubectl rollout status deployment/frontend-deployment
                kubectl get pods